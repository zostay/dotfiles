#!/usr/bin/env perl6
use v6;

use Base64;
use META6;
use HTTP::UserAgent;
use HTTP::Request::Common;
use HTTP::Request::FormData;

constant $PAUSE-ADD-URI = 'https://pause.perl.org/pause/authenquery';

class Release {
    has Str $.v-string is required;
    has Bool $.release is required;
    has Bool $.skip-eval is required;
    has Str $.meta6 is required;

    has Version $!version;
    has Str $!vless-string;

    has Bool $!in-progress = False;
    method progress-item(Str:D $str) { print $str; $!in-progress++ }
    method progress-dry-run(Str:D $str) { say '' if $!in-progress--; say "- $str" }
    method progress-status(Str:D $str) { say $str; $!in-progress-- }

    method stop(Str:D $str) { die "STOP! $str" }

    has $!_meta;
    method meta() {
        $!_meta //= do {
            my $meta6-filename = $!meta6.IO;
            if $meta6-filename.f {
                META6.new(file => $meta6-filename);
            }
            else {
                self.stop: "No $!meta6 found!";
            }
        }
    }

    has $!_main-module;
    method main-module() { $!_main-module //= $.meta.name.trans( [ '-' ] => [ '::' ] ) }

    has $!_module-file;
    method module-file() {
        $!_module-file = $.main-module.subst('::', '-', :g)
                       ~ '-' ~ $.meta.version.Str;
    }

    method TWEAK() {
        $!v-string ~~ s/^v(\d)/$0/;
        $!version = Version.new($!v-string);

        $!v-string = $!version.perl;
        $!vless-string = $!version.Str;
    }

    method verify-tag() {
        self.progress-item: "Verifying release-$!v-string branch... ";

        my $git-tag-l = run(qqww< git tag -l $!v-string >, :out);
        $git-tag-l.out.slurp.trim eq $.v-string
            or self.stop: "Tag $.v-string could not be verified.";

        self.progress-status: "OK";
    }

    method verify-meta() {
        self.progress-item: "Verify that META6 version matches tag $.v-string... ";

        # Make sure version and tag match
        $.meta.version.perl eq $.v-string
            or self.stop: "META6 reports version $.meta.version(), but the tag is $.v-string.";

        self.progress-status: "OK";
    }

    method verify-main-module() {
        self.progress-item: "Verify that main module version matches tag $.v-string.... ";

        # Make sure the version and main module :ver match
        my $main-module  = $.meta.name;
        my $main-pm6     = $.meta.provides.{ $main-module };
        unless $.skip-eval {
            my $main-ver = qqx<perl6 -Ilib -e 'EVALFILE "$main-pm6"; say ~::("$main-module").^ver'>.trim;
            Version.new($main-ver) eqv $.meta.version
                or self.stop: "Main module reports version $main-ver, but the META6.json reports $.meta.version()";
        }

        self.progress-status: "OK";
    }

    method build-archive() {
        self.progress-item: "Building tarball archive for relase... ";

        # Generate the tarball
        if $!release {
            run(qqww<
                git archive "--prefix=$.module-file/" -o "$.module-file.tar.gz" $!v-string
            >) or die "STOP! Unable to generate tarball named $.module-file.tar.gz";
            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: qq[Run: git archive "--prefix=$.module-file/" -o "$.module-file.tar.gz" $!v-string];
        }
    }

    method send-archive-to-cpan() {
        self.progress-item: "Uploading release archive to CPAN... ";

        if $!release {
            # Upload to CPAN
            my $ua = HTTP::UserAgent.new;

            my $fd = HTTP::Request::FormData.new;
            $fd.add-part('HIDDENNAME', 'HANENKAMP');
            $fd.add-part('CAN_MULTIPART', 1);
            $fd.add-part('SUBMIT_pause99_add_uri_httpupload', " Upload this file from my disk ");
            $fd.add-part('pause99_add_uri_uri', '');
            $fd.add-part('pause99_add_uri_httpupload', "$.module-file.tar.gz".IO, :content-type<application/octet-stream>);
            $fd.add-part('pause99_add_uri_subdirtext', "Perl6");
            my $upload-req = POST(
                $PAUSE-ADD-URI,
                Content-Type => $fd.content-type,
                content => $fd.content,
            );
            my $secret = qqx<zostay-get-secret "Perl PAUSE">.trim;
            my $auth = encode-base64("hanenkamp:$secret", :str);
            $upload-req.field(Authorization => "Basic $auth");
            #my $fh = 'test.request'.IO.open(:w);
            #$fh.print($upload-req.Str(:bin));
            #$fh.write($upload-req.content);
            #$fh.close;
            my $res = $ua.request($upload-req);
            if $res.is-success {
                #note $res.Str;
                #'output.html'.IO.spurt($res.content);
                self.progress-status: "OK";
            }
            else {
                self.stop: "Failed to upload to PAUSE:\n$res.Str()";
            }
        }
        else {
            self.progress-dry-run: qq[Uploading $.module-file.tar.gz to PAUSE user HANENKAMP];
        }
    }

    method run() {
        self.verify-tag;
        self.verify-meta;
        self.verify-main-module;

        self.build-archive;
        self.send-archive-to-cpan;
    }
}

my %*SUB-MAIN-OPTS = :named-anywhere;

sub MAIN(
    Str $v-string, #= The release tag to package and upload
    Bool :$release = False, #= Really do a release, otherwise, just dry-run
    Bool :$skip-eval = False, #= This module is weird, so skip the EVAL to check the module version.
    Str :$meta6 = 'META6.json', #= Name of the META file
) {
    my $tool = Release.new(
        :$v-string,
        :$release,
        :$skip-eval,
        :$meta6,
    );

    $tool.run;
}
