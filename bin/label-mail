#!/usr/bin/env perl
use v5.24;
use warnings;

use lib "$ENV{HOME}/bin/lib";

use DDP;
use DateTime;
use Date::Parse qw( str2time );
use Email::MIME;
use File::Find::Rule;
use List::Util qw( none max sum );
use YAML::Tiny;
use Zostay qw( dotfiles_environment );

my $MAILDIR = "$ENV{HOME}/Mail";

my $env    = dotfiles_environment();
my $config = YAML::Tiny->read("$ENV{HOME}/.label-mail.yml")->[0];
my @PURGE = (
    @{ $config->{'*'}  // [] },
    @{ $config->{$env} // [] },
);

if (-f "$ENV{HOME}/.label-mail.local.yml") {
    my $local = YAML::Tiny->read("$ENV{HOME}/.label-mail.local.yml")->[0];
    push @PURGE, @{ $local // [] };
}

die "no Mail directory present" unless -d $MAILDIR;

my %actions;
sub label_mail {
    my ($start, @criteria) = @_;

    my $rule = File::Find::Rule->file->start($start);
    while (defined (my $msg_file = $rule->match)) {
        open my $msg_fh, '<', $msg_file or die "cannot open $msg_file: $!";
        my $msg_txt = do { local $/; <$msg_fh> };
        close $msg_fh;

        next unless $msg_txt;

        my ($folder, $rd, $basename) = split '/', substr $msg_file, length($MAILDIR) + 1;

        # say $folder;
        # say $msg_file;

        my $msg = Email::MIME->new($msg_txt);
        # say $msg->header_str('Date'), " = ", str2time($msg->header_str('Date'));
        my $date = DateTime->from_epoch(epoch => str2time($msg->header_str('Date')));

        my $x_keywords = $msg->header_str('X-Keywords');
        my @keywords   = $x_keywords ? split(/\s*,\s*/, $x_keywords) : ();
        my %keywords   = map { $_ => 1 } @keywords;

        # Purged, leave it be
        next if $keywords{'\Trash'};

        for my $c (@criteria) {
            # MUST HAVE AN ACTION
            next unless $c->{label}
                     or $c->{move};

            # No need to try and set the label again
            next if $c->{label} && $keywords{ $c->{label} };

            # No need to try and move when it's already here
            next if $c->{move} && $folder eq $c->{move};

            my $okay_date = $c->{okay_date};
            next unless DateTime->compare($date, $okay_date) < 0;

            # Don't apply \Trash to important or starred
            if ($c->{label} && $c->{label} eq '\Trash') {
                next if $keywords{'\Important'};
                next if $keywords{'\Starred'};
            }

            # Match From address, exact
            if (defined $c->{from}) {
                my $from = $msg->header_str('From');
                my @addrs = Email::Address->parse($from);
                next unless @addrs;

                next if none { $_->address eq $c->{from} } @addrs;
            }

            # Match by Subject, exact
            if (defined $c->{subject}) {
                my $subject = $msg->header_str('Subject');
                next unless $c->{subject} eq $subject;
            }

            # Match by Subject, case-insensitive (with folded case)
            if (defined $c->{isubject}) {
                my $subject = $msg->header_str('Subject');
                next unless fc $c->{isubject} eq fc $subject;
            }

            # Add a label
            if ($c->{label}) {
                # Record stats
                $actions{ "Labeled $c->{label}" }++;

                # Update the local state
                push @keywords, $c->{label};
                $keywords{ $c->{label} } = 1;

                # Update the message
                $msg->header_str_set(
                    'X-Keywords' => join(', ', @keywords),
                );

                # Write the message back with changes
                open my $out_fh, '>', $msg_file or die "cannot open $msg_file to label: $!";
                print $out_fh $msg->as_string;
                close $out_fh;
            }

            # Move to a different folder
            if ($c->{move}) {
                # Record stats
                $actions{ "Moved $c->{move}" }++;

                rename $msg_file, "$MAILDIR/$c->{move}/cur/$basename";
            }
        }
    }
}

my %folders;
for my $config (@PURGE) {
    $config->{okay_date} = DateTime->now->subtract(
        days => $config->{days} // 90,
    );

    push @{ $folders{ $config->{folder} // '' } }, $config;
}

for my $folder (keys %folders) {
    label_mail("$MAILDIR/$folder", @{ $folders{ $folder } });
}

my $total = sum values %actions;
if ($total > 0) {
    my $kw    = max (5, map { length $_ } keys %actions);
    my $cw    = max map { length $_ } ($total, values %actions);
    for my $key (sort keys %actions) {
        say sprintf " %-${kw}s : %${cw}d", $key, $actions{ $key };
    }
    say "-" x ($kw+2) . " " . "-" x ($cw+2);
    say sprintf " %-${kw}s : %${cw}d", "Total", $total;
}
else {
    say "Nothing to do.";
}
