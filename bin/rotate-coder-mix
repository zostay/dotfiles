#!/usr/bin/env python3

from ytmusicapi import YTMusic
from os.path import expanduser
import argparse
import sys
#import pprint

# Configuration goes here
auth_file = expanduser("~/.ytmusic-api-oauth.json")

# My play list IDs

# REAL
coder_mix_id = "PLj5I5pH5n-mV5O3FaXg34I5p85XOwrZiW"
rotation_id = "PLj5I5pH5n-mWh0842nIE6mnYAGfNtUBcG"

# TEST
# coder_mix_id = "PLj5I5pH5n-mU3O6M7PaVJUnQPl3SvoEXp"
# rotation_id = "PLj5I5pH5n-mXB1gDis7_gkJHtsNm1juzG"

# How many songs to rotate
regular_rotate = 8
best_rotate = 2

# Predicates for matching tracks
regular_tracks = lambda t: t["likeStatus"] != "LIKE"
best_tracks = lambda t: t["likeStatus"] == "LIKE"

#pp = pprint.PrettyPrinter()

def rotate_ytmusic():
    ytmusic = YTMusic(auth_file)
    coder_mix = ytmusic.get_playlist(coder_mix_id, 1000)
    coder_mix_rotation = ytmusic.get_playlist(rotation_id, 10000)

    regular_needs_rotate = regular_rotate + coder_mix["trackCount"] - 200
    best_needs_rotate = best_rotate

    regular_needs_replacement = regular_rotate
    best_needs_replacement = best_rotate

    #pp.pprint(coder_mix["tracks"])
    outgoing_regular, outgoing_best, outgoing = pull_tracks(
            coder_mix["tracks"], 
            regular_needs_rotate, 
            best_needs_rotate)

    print("Moving out of rotation:")
    display_tracks(outgoing_regular, outgoing_best)

    if len(outgoing) > 0:
        ytmusic.add_playlist_items(rotation_id, outgoing, duplicates = True)
    if len(outgoing_regular) > 0:
        ytmusic.remove_playlist_items(coder_mix_id, outgoing_regular)
    if len(outgoing_best) > 0:
        ytmusic.remove_playlist_items(coder_mix_id, outgoing_best)

    incoming_regular, incoming_best, incoming = pull_tracks(
            coder_mix_rotation["tracks"],
            regular_needs_replacement,
            best_needs_replacement)

    print("\nMoving into rotation:")
    display_tracks(incoming_regular, incoming_best)

    if len(incoming) > 0:
        ytmusic.add_playlist_items(coder_mix_id, incoming, duplicates = True)
    if len(incoming_regular) > 0:
        ytmusic.remove_playlist_items(rotation_id, incoming_regular)
    if len(incoming_best) > 0:
        ytmusic.remove_playlist_items(rotation_id, incoming_best)

# Pulls every other song matching the predicate from the track list.
def every_other_one(tracks, n, pred):
    i = 0
    matches = []
    needsSkip = False
    for r in range(0, n):
        while needsSkip and i < len(tracks):
            if pred(tracks[i]):
                needsSkip = False
            i += 1

        while not pred(tracks[i]) and i < len(tracks):
            i += 1

        # stop early if we reach the end early
        if i >= len(tracks):
            return matches

        matches.append(tracks[i])

        needsSkip = True
    return matches

def display_tracks(regular, best):
    for t in regular:
        print(" - %s by %s" % (t["title"], t["artists"][0]["name"]))
    for t in best:
        print(" * %s by %s" % (t["title"], t["artists"][0]["name"]))

def pull_tracks(tracks, regular, best):
    r = every_other_one(tracks, regular, regular_tracks)
    b = every_other_one(tracks, best, best_tracks)
    v = [ t["videoId"] for t in r + b ]
    #pp.pprint(v)
    return r, b, v

def main():
    try:
        rotate_ytmusic()
    except:
        print("You probably need to login. Run: ytmusicapi oauth")
        e = sys.exc_info()[1]
        print(e)

if __name__ == "__main__":
    main()
