#!/usr/bin/perl

use v5.14;
use warnings;
use strict;

use Getopt::Long;
use List::Util qw( min max shuffle );

my $lc = 0.4;
my $uc = 0.3;
my $digits = 0.2;
my $symbols = 0.1;

my $length = 20;

my $chbs = 0;

my @lc = shuffle 'a' .. 'z';
my @uc = shuffle 'A' .. 'Z';
my @symbols = shuffle split //, '~`!@#$%^&*()-_=+[{]}\\|:;"\'<,>.?/';
my @digits = shuffle '0' .. '9';

GetOptions(
    'lc=f'      => \$lc,
    'uc=f'      => \$uc,
    'digits=f'  => \$digits,
    'symbols=f' => \$symbols,

    'n=i'        => \$length,

    'chbs'       => \$chbs,
);

die "--lc must be a positive number" unless $lc >= 0;
die "--uc must be a positive number" unless $uc >= 0;
die "--digits must be a positive number" unless $digits >= 0;
die "--symbols must be a positive number" unless $symbols >= 0;
die "-n must be a positive integer" unless $length > 0;

sub pick {
    my ($n, @chars) = @_;
    return if $n == 0;
    return map { $chars[ int(rand(scalar @chars)) ] } 1 .. $n;
}

my $pw;
if ($chbs) {
    my $dict = '/usr/share/dict/words';
    open my $fh, '<', '/usr/share/dict/words'
        or die "unable to read /usr/share/dict/words: $!";

    my @words = <$fh>;
    @words = shuffle @words;

    $pw = '';
    while (length $pw < $length) {
        $pw .= $words[ int(rand(scalar @words)) ];
        chomp $pw;
        $pw .= ' ';
    }
}
else {
    my $totes = $lc + $uc + $digits + $symbols;
    $lc      /= $totes;
    $uc      /= $totes;
    $digits  /= $totes;
    $symbols /= $totes;

    my $lc_chars     = $lc      > 0 ? max(1, $lc      * $length) : 0;
    my $uc_chars     = $uc      > 0 ? max(1, $uc      * $length) : 0;
    my $digit_chars  = $digits  > 0 ? max(1, $digits  * $length) : 0;
    my $symbol_chars = $symbols > 0 ? max(1, $symbols * $length) : 0;

    while ($lc_chars + $uc_chars + $digit_chars + $symbol_chars > $length) {
        if ($lc_chars >= max($uc_chars, $digit_chars, $symbol_chars)) {
            $lc_chars--;
        }
        elsif ($uc_chars >= max($lc_chars, $digit_chars, $symbol_chars)) {
            $uc_chars--;
        }
        elsif ($digit_chars >= max($lc_chars, $uc_chars, $symbol_chars)) {
            $digit_chars--;
        }
        else {
            $symbol_chars--;
        }
    }

    my @pw = shuffle(
        pick($lc_chars, @lc),
        pick($uc_chars, @uc),
        pick($digit_chars, @digits),
        pick($symbol_chars, @symbols),
    );

    $pw = join '', @pw;
}

say $pw;
