#!/usr/bin/env perl6
use v6;

use META6;

my constant @DECLARATIONS = < package module class role grammar model >;

class Releng {
    has Str $.v-string;
    has Bool $.releng;
    has Str $.changes;
    has Str $.meta6;
    has Str $.readme;

    has Version $!version;
    has Str $!vless-string;

    has Bool $!in-progress = False;
    method progress-item(Str $str) { print $str; $!in-progress++ }
    method progress-dry-run(Str $str) { say '' if $!in-progress--; say "- $str" }
    method progress-status(Str $str) { say $str; $!in-progress-- }

    method stop(Str $str) { die "STOP! $str" }

    has $!_meta;
    method meta() {
        $!_meta //= do {
            my $meta6-filename = $!meta6.IO;
            if $meta6-filename.f {
                META6.new(file => $meta6-filename);
            }
            else {
                self.stop: "No $!meta6 found!";
            }
        }
    }

    has $!_main-module;
    method main-module() { $!_main-module //= $.meta.name }

    has $!_main-pm6;
    method main-pm6() { $!_main-pm6 //= $.meta.provides.{ $.main-module } }

    has $!_main-pod6;
    method main-pod6() {
        return $_ with $!_main-pod6;

        # The .pm6 file for the main module
        my $pm6 = $.meta.provides.{ $.main-module };

        # Look to see if there's .pod6 and use it or fallback to .pm6
        <.pod6 .pod>.map(-> $suffix {
            $pm6.subst(/ '.pm' '6'? /, $suffix)
        }).first({ .IO.f }) // $pm6;
    }

    method TWEAK() {
        $!v-string ~~ s/^v(\d)/$0/;
        $!version = Version.new($!v-string);

        $!v-string = $!version.perl;
        $!vless-string = $!version.Str;
    }

    method all-pm-files() {
        gather {
            my @open = "lib".IO;
            while @open.shift -> $file {
                if $file.d {
                    push @open, $file.dir;
                }
                elsif $file.f && $file ~~ / ".pm6" $/ {
                    take $file;
                }
            }
        }
    }

    method verify-tag() {
        self.progress-item: "Verifying $!v-string tag... ";
        my $git-tag-l = run(qqww< git tag -l $!v-string >, :out);
        $git-tag-l or self.stop: "`git tag -l $!v-string` exited with an error.";
        $git-tag-l.out.slurp.trim eq ~$!v-string
            and self.stop: "Tag $!v-string is already used.";
        self.progress-status: "OK";
    }

    method verify-release() {
        self.progress-item: "Verifying release-$!v-string branch... ";
        my $git-branch-l = run(qqww< git branch --list "release-$!v-string" >, :out);
        $git-branch-l or self.stop: "`git branch --list release-$!v-string` exited with an error.";
        $git-branch-l.out.slurp.trim eq ~"release-$!v-string"
            and self.stop: "Branch release-$!v-string is already used.";
        self.progress-status: "OK";
    }

    method begin-release() {
        self.progress-item: "Beginning release release-$!v-string branch... ";
        if $!releng {
            run(qqww< git checkout -b "release-$!v-string" >);
            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: "Run: git checkout -b release-$!v-string";
        }
    }

    method updating-changes() {
        self.progress-item: "Updating Changes... ";
        my @release-changes = $!changes.IO.lines;
        self.stop: "$!changes is missing \{\{\$NEXT}} line at top."
            unless @release-changes[0] eq '{{$NEXT}}';

        my $today = ~Date.today;

        if $!releng {
            $!changes.IO.spurt("$!v-string\t$today\n@release-changes[0^..*].join("\n")");

            run(qqww< git add $!changes >);
            run(qqww< git commit -m "releng $!v-string: $!changes" >);

            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: "Replace \{\{\$NEXT}} with $!v-string and $today";
            self.progress-dry-run: "Run: git add $!changes";
            self.progress-dry-run: "Run: get commit -m 'releng $!v-string: $!changes'";
        }
    }

    method updating-meta6() {
        self.progress-item: "Updating version in $!meta6... ";

        if $!releng {
            $.meta.version = $!version;
            $!meta6.IO.spurt($.meta.to-json);

            run(qqww< git add $!meta6 >);
            run(qqww< git commit -m "releng $!v-string: $!meta6" >);

            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: "Replacing: version with $!vless-string in $!meta6";
            #self.progress-dry-run: "Replacing: provides with latest compunit info";
            self.progress-dry-run: "Run: git add $!meta6";
            self.progress-dry-run: "Run: git commit -m 'releng $!v-string: $!meta6'";
        }
    }

    method updating-main-module() {
        self.progress-item: "Updating version in $.main-module (in $.main-pm6)... ";

        if $!releng {
            my @main-lines = $.main-pm6.IO.lines;
            my $version-replaced = False;

            {
                my $main-fh    = $.main-pm6.IO.open(:w);
                LEAVE .close with $main-fh;

                my $main-module = $.main-module; # for closing
                my regex package-line {
                    [ package | module | class | role | grammar ]
                    \s+
                    "$main-module"
                }

                my regex version-part {
                    ':ver<' <-[>]>+ '>'
                }

                for @main-lines -> $line is copy {
                    if !$version-replaced && $line ~~ /<package-line>/ {
                        self.stop: "Unable to find ':ver<...>' in package line."
                            unless $line ~~ /<version-part>/;

                        $line ~~ s/<version-part>/:ver<$!vless-string>/;

                        $version-replaced++;
                    }

                    $main-fh.say: $line;
                }
            }

            self.stop: "Failed to find package line for $.main-module in $.main-pm6"
                unless $version-replaced;

            run(qqww< git add $.main-pm6 >);
            run(qqww< git commit -m "releng $!v-string: $.main-pm6" >);

            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: "Replace :ver<...> for $.main-module in $.main-pm6 with :ver<$!vless-string>";
            self.progress-dry-run: "Run: git add $.main-pm6";
            self.progress-dry-run: "Run: git commit -m 'releng $!v-string: $.main-pm6'";
        }
    }

    method updating-readme() {
        self.progress-item: "Updating $!readme... ";

        if $!releng {
            my $readme-md = run(qqww< perl6 -Ilib --doc=Markdown $.main-pod6 >, :out);
            $readme-md or self.stop: "`perl6 -Ilib --doc=Markdown $.main-pod6` exited with an error.";
            $!readme.IO.spurt($readme-md.out.slurp);

            my $git-status = run(qqww< git status --porcelain $!readme >, :out);
            $git-status or self.stop: "`git status --porcelain $!readme` exited with an error.";
            if $git-status.out.slurp.trim.starts-with("M") {
                run(qqww< git add $!readme >);
                run(qqww< git commit -m "releng $!v-string: $!readme" >);
            }
            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: "Run: perl6 --doc=Markdown $.main-pod6 >! $!readme";
            self.progress-dry-run: "Run: git add $!readme";
            self.progress-dry-run: "Run: git commit -m 'releng $!v-string: $!readme'";
        }
    }

    method tag-and-push-release() {
        self.progress-item: "Tagging release $!v-string and pushing changes... ";

        if $!releng {
            #run(qqww< git push origin "release-$!v-string" >);
            run(qqww< git tag $!v-string >);
            run(qqww< git push origin $!v-string >);

            self.progress-status: "OK";
        }
        else {
            #self.progress-dry-run: "Run: git push origin release-$!v-string";
            self.progress-dry-run: "Run: git tag $!v-string";
            self.progress-dry-run: "Run: git push origin $!v-string";
        }
    }

    method merge-release-and-reset() {
        self.progress-item: "Merging release into master and resetting for development... ";

        if $!releng {
            run(qqww< git checkout master >);
            run(qqww< git merge --no-ff "release-$!v-string" -m "releng $!v-string" >);

            my $master-changes = $!changes.IO.slurp;
            $!changes.IO.spurt("\{\{\$NEXT}}\n\n$master-changes");

            run(qqww< git add $!changes >);
            run(qqww< git commit -m "dev resume: $!changes" >);
            run(qqww< git push origin master >);

            self.progress-status: "OK";
        }
        else {
            self.progress-dry-run: "Run: git checkout master";
            self.progress-dry-run: "Run: git merge --no-ff release-$!v-string";
            self.progress-dry-run: "Insert \{\{\$NEXT}} to the top of $!changes";
            self.progress-dry-run: "Run: git add $!changes";
            self.progress-dry-run: "Run: git commit -m 'dev resume: $!changes'";
            self.progress-dry-run: "Run: git push origin master";
        }
    }

    my constant $ssh-url-prefix = 'git@github.com:';
    my constant $git-suffix     = '.git';

    method await-travis-ci() {
        self.progress-item: "Waiting for Travis-CI... ";

        my $git-get-url = run(qqww< git remote get-url origin >, :out);
        $git-get-url or self.stop: "Unable to run `git remote get-url origin`!";
        my $origin-url = $git-get-url.out.slurp.trim;

        my $slug = do if $origin-url.starts-with($ssh-url-prefix) && $origin-url.ends-with($git-suffix) {
            my $start = $ssh-url-prefix.chars;
            my $end   = $origin-url.chars - $git-suffix.chars - 1;
            $origin-url.substr($start..$end);
        }
        else {
            self.stop: "Unknown origin url $origin-url!";
        }

        if $!releng {
            TRAVIS_CHECK: loop {
                my $travis-branches = run(qqww< travis branches --org --repo $slug >, :out);
                $travis-branches or self.stop: "Unable to run `travis branches --org -repo $slug`!";
                for $travis-branches.out.lines -> $branch-info {
                    my ($branch, $info) = $branch-info.split(/ ':' \s+ /);

                    next unless $branch eq $!v-string;

                    my ($build-num, $status, $comment) = $info.split(/\s+/, 3);

                    if $status eq 'passed' {
                        last TRAVIS_CHECK;
                    }
                    elsif $status eq 'errored' | 'failed' {
                        self.stop: "Travis-CI test run failed.";
                    }
                }

                sleep 60;
            }

            self.progress-status: "OK";
        }

        else {
            self.progress-dry-run: "Monitor: travis branches --org --repo $slug";
        }
    }

    method release() {
        self.progress-item: "Releasing $!v-string to CPAN... ";
        if $!releng {
            run(qqww< p6-release --release $!v-string >);
            say "OK";
        }
        else {
            self.progress-dry-run: "Run: p6-release --release $!v-string";
        }
    }

    method run() {
        self.verify-tag;
        self.verify-release;

        self.begin-release;

        self.updating-changes;
        self.updating-meta6;
        self.updating-main-module;
        self.updating-readme;

        self.tag-and-push-release;
        self.merge-release-and-reset;

        self.await-travis-ci;

        self.release;
    }
}

my %*SUB-MAIN-OPTS = :named-anywhere;

sub MAIN(
    Str $v-string, #= The number of the release
    Bool :$releng = False, #= Really engineer the release, otherwise do a dry run
    Str :$changes = 'Changes', #= Name of the Changes file
    Str :$meta6 = 'META6.json', #= Name of the META file
    Str :$readme = 'README.md' #= Name of the README.md file
) {
    my $tool= Releng.new(
        :$v-string,
        :$releng,
        :$changes,
        :$meta6,
        :$readme,
    );

    $tool.run;
}
