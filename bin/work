#!/usr/bin/env raku

use v6;

my %*SUB-MAIN-OPTS = :named-anywhere;

my class Session {
    has Str $.name;
    has IO::Path $.path;

    has Bool $.is-name-explicitly-set;
    has Bool $.is-existing-session;
    has Bool $.is-path-explicitly-set;

    submethod BUILD(:$!name, :$path) {
        $!is-name-explicitly-set = False;
        $!is-existing-session    = False;

        $!is-name-explicitly-set++ with $!name;

        if current-session-name() -> $this-session {
            $!is-existing-session++;
            $!name //= $this-session;
        }

        $!name //= 'stuff' without $!name;

        $!name ~~ tr/./-/;

        $!is-path-explicitly-set = False;
        $!path = do with $path {
            $!is-path-explicitly-set++;
            when IO::Path { $path }
            default       { $path.IO }
        }
        elsif $!is-existing-session { $*CWD }
        elsif $!is-name-explicitly-set {
            if $*HOME.add("projects/$!name").d {
                $!is-path-explicitly-set++;
                $*HOME.add("projects/$!name");
            }
            else { $*HOME }
        }
        else { $*HOME }

        $!name = $!name.IO.basename;
    }

    has IO::Path $!vim-session;
    method vim-session(--> IO::Path:D) {
        $!vim-session //= self!build-vim-session;
    }

    method short-name(--> Str:D) {
        if $!is-name-explicitly-set {
            $!name.IO.basename;
        }
        else {
            $!name;
        }
    }

    method window-name(--> Str:D) { "$.short-name:" }

    method !build-vim-session {
        my $vim-session;

        if $!path eq $*HOME {
            $vim-session = $*HOME.add(".vim/sessions/$!name.vim");
            $vim-session.parent.mkdir;
        }
        else {
            $vim-session = $!path.add('.session.vim');
        }

        if !$vim-session.e && $vim-session.parent.d {
            $vim-session.spurt('');
        }

        $vim-session;
    }

    method go-go-go(--> True) {
        if current-session-name() eq $!name {
             say "This is the [$!name] session!";
        }
        else {
            if !tmux('has-session', :target-session($!name)) {
                tmux 'new-session',
                    :detached,
                    :cd($!path),
                    :session-name($!name),
                    ;
                self.initialize-session;
            }

            if %*ENV<TMUX> {
                tmux 'switch-client',
                    :target-session($!name),
                    ;
            }

            else {
                tmux 'attach-session',
                    :target-session($!name),
                    ;
            }
        }
    }

    multi method add-window('editor' --> True) {
        tmux 'new-window',
            :name<edit>,
            :cd($.path),
            :target-session($.window-name),
            qq[$*HOME/bin/resize-window-fix; VIM_SESSION='$.vim-session' vim -S $.vim-session],
            ;
    }

    multi method add-window('repl' --> True) {
        tmux 'new-window',
            :name<repl>,
            :cd($!path),
            :target-session($.window-name),
            "raku",
            ;
    }

    method initialize-session(--> True) {
        self.add-window('editor');

        given $!path.parent.basename {
            when 'raku' {
                self.add-window('repl');
            }
        }
    }
}

multi MAIN('add', $what,
    Str $name? is copy,
    Str $path? is copy,
) {
    my Session $session .= new(:$name, :$path);
    $session.add-window($what);
}

multi MAIN('on',
    Str $name? is copy,
    Str $path? is copy,
) {
    my Session $session .= new(:$name, :$path);
    $session.go-go-go;
}

multi MAIN('list', Bool :$o) {
    if $o {
        quietly tmux('list-sessions').lines.grep(/'(attached)'/).map({
            .split(/\s+/)[0].subst(/':'$/, '')
        }).join("\n").say;
    }
    else {
        quietly tmux('list-sessions').lines.map({
            .split(/\s+/)[9,0].join(' ').subst(/':'$/, '').subst('(attached)', '*').subst(/^' '/, '  ')
        }).join("\n").say;
    }
}

sub current-session-name(--> Str:D) {
    return '' unless %*ENV<TMUX>;
    tmux 'display-message', :print, '#S';
}

sub _run(*@cmd-line, |c) {
    #note @cmd-line.map({ /\s/ ?? qq["$_"] !! $_ }).join(' ');
    run |@cmd-line, |c;
}

multi tmux('select-window', :$target-window! --> Bool:D) {
    ?_run qqww< tmux select-window -t "$target-window" >;
}

multi tmux('list-sessions' --> IO::Handle:D) {
    my $p = _run qqww< tmux list-sessions >, :out;
    $p.out;
}

multi tmux('display-message', $message, :$print --> Str:D) {
    my $p = _run 'tmux', 'display-message',
        (do if $print { '-p' }),
        $message,
        :out,
        ;
    $p.out.slurp.chomp;
}

multi tmux('has-session', Str:D :$target-session! --> Bool:D) {
    ?_run qqww< tmux has-session -t $target-session >, :out, :err;
}

multi tmux('new-window', *@cmd-line, Str :$name, IO::Path :$cd, Str :$target-session) {
    ?_run 'tmux', 'new-window',
        (do with $name { '-n', $name }),
        (do with $cd { '-c', $cd }),
        (do with $target-session { '-t', $target-session }),
        @cmd-line,
        ;
}

multi tmux('new-session',
    Bool :$detached = False,
    IO::Path :$cd,
    Str :$session-name,
    --> Bool:D
) {
    ?_run 'tmux', 'new-session',
        (do with $detached { '-d' }),
        (do with $cd { '-c', $cd }),
        (do with $session-name { '-s', $session-name }),
        ;
}

multi tmux('switch-client',
    Str:D :$target-session!,
    --> Bool:D
) {
    ?_run qqww< tmux switch-client -t $target-session >;
}

multi tmux('attach-session',
    Str:D :$target-session!,
    --> Bool:D
) {
    ?_run qqww< tmux attach-session -t $target-session >;
}

# vim: ft=raku
