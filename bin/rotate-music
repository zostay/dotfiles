#!/usr/bin/env python3

from ytmusicapi import YTMusic
from os.path import expanduser
import yaml
import sys
#import pprint

# Rotate Music Configuration goes here
config_file = expanduser("~/.rotate-music.yaml")

if len(sys.argv) != 2:
    print("Usage:",sys.argv[0],"<rotation>")
    sys.exit(1)

rotation_name = sys.argv[1]

# Load configuration file
with open(config_file, 'r') as cfg_file:
    cfg = yaml.safe_load(cfg_file)

if cfg["rotations"][rotation_name] is None:
    print("Rotation",rotation_name,"not found in configuration file.")
    sys.exit(1)

auth_file = expanduser(cfg["auth_file"])
defaults = cfg.get("defaults", {})
rotation = cfg["rotations"][rotation_name]
playlist_id = rotation["playlist"]
rotation_id = rotation["rotation"]

regular_rotate = defaults.get("regular_rotate", 8) if rotation.get("regular_rotate") is None else rotation["regular_rotate"]
best_rotate = defaults.get("best_rotate", 2) if rotation.get("best_rotate") is None else rotation["best_rotate"]
playlist_max = defaults.get("playlist_max", 200) if rotation.get("playlist_max") is None else rotation["playlist_max"]

# Predicates for matching tracks
regular_tracks = lambda t: t["likeStatus"] != "LIKE"
best_tracks = lambda t: t["likeStatus"] == "LIKE"

#pp = pprint.PrettyPrinter()

def rotate_ytmusic():
    ytmusic = YTMusic(auth_file)
    playlist_songs = ytmusic.get_playlist(playlist_id, 1000)
    rotation_songs = ytmusic.get_playlist(rotation_id, 10000)

    regular_needs_rotate = regular_rotate + playlist_songs["trackCount"] - playlist_max
    best_needs_rotate = best_rotate

    regular_needs_replacement = regular_rotate
    best_needs_replacement = best_rotate

    #pp.pprint(coder_mix["tracks"])
    outgoing_regular, outgoing_best, outgoing = pull_tracks(
            playlist_songs["tracks"],
            regular_needs_rotate, 
            best_needs_rotate)

    print("Moving out of rotation:")
    display_tracks(outgoing_regular, outgoing_best)

    if len(outgoing) > 0:
        ytmusic.add_playlist_items(rotation_id, outgoing, duplicates = True)
    if len(outgoing_regular) > 0:
        ytmusic.remove_playlist_items(playlist_id, outgoing_regular)
    if len(outgoing_best) > 0:
        ytmusic.remove_playlist_items(playlist_id, outgoing_best)

    incoming_regular, incoming_best, incoming = pull_tracks(
            rotation_songs["tracks"],
            regular_needs_replacement,
            best_needs_replacement)

    print("\nMoving into rotation:")
    display_tracks(incoming_regular, incoming_best)

    if len(incoming) > 0:
        ytmusic.add_playlist_items(playlist_id, incoming, duplicates = True)
    if len(incoming_regular) > 0:
        ytmusic.remove_playlist_items(rotation_id, incoming_regular)
    if len(incoming_best) > 0:
        ytmusic.remove_playlist_items(rotation_id, incoming_best)

# Pulls every other song matching the predicate from the track list.
def every_other_one(tracks, n, pred):
    i = 0
    matches = []
    needsSkip = False
    for r in range(0, n):
        while needsSkip and i < len(tracks):
            if pred(tracks[i]):
                needsSkip = False
            i += 1

        while i < len(tracks) and not pred(tracks[i]):
            i += 1

        # stop early if we reach the end early
        if i >= len(tracks):
            return matches

        matches.append(tracks[i])

        needsSkip = True
        i += 1
    return matches

def display_tracks(regular, best):
    for t in regular:
        print(" - %s by %s" % (t["title"], t["artists"][0]["name"]))
    for t in best:
        print(" * %s by %s" % (t["title"], t["artists"][0]["name"]))

def pull_tracks(tracks, regular, best):
    r = every_other_one(tracks, regular, regular_tracks)
    b = every_other_one(tracks, best, best_tracks)
    v = [ t["videoId"] for t in r + b ]
    #pp.pprint(v)
    return r, b, v

def main():
    try:
        rotate_ytmusic()
    except:
        print("You probably need to login. Run: ytmusicapi oauth")
        e = sys.exc_info()[1]
        print(e)

if __name__ == "__main__":
    main()
