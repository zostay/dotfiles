#!/usr/bin/env perl6

use v6;
use JSON::Fast;

my %*SUB-MAIN-OPTS = :named-anywhere;

my $STANDARD-FIELDS := set <
  @tag
  @timestamp
  message
  pid
  priority
  script_exec_id
  script_exec_nth
  source_host
>;

my module Term::ModernColor {
  BEGIN {
    our %named-colors is export =
      black  => 0, gray    => 8,
      maroon => 1, red     => 9,
      green  => 2, lime    => 10,
      olive  => 3, yellow  => 11,
      navy   => 4, blue    => 12,
      purple => 5, fuschia => 13,
      teal   => 6, aqua    => 14,
      silver => 7, white   => 15,
      ;

    our proto fgcolor(|) is export(:codes) { * }
    multi fgcolor(Str:D $color-name --> Str:D) {
      return "" with $*DISABLE-COLOR;
      sprintf "\e[38;5;%03dm", %named-colors{ $color-name };
    }

    our proto bgcolor(|) is export(:codes) { * }
    multi bgcolor(Str:D $color-name --> Str:D) {
      return "" with $*DISABLE-COLOR;
      sprintf "\e[48;5;%03dm", %named-colors{ $color-name };
    }

    for %named-colors.keys -> $color {
      my $pfg = sub ($x?) { fgcolor($color) ~ ($x//'') } but role { method name { $color } }
      trait_mod:<is>(:export(:named, :plain, :plainnamed), $pfg);

      my $fg = sub ($x?) { fgcolor($color) ~ ($x//'') } but role { method name { "fg$color" } }
      trait_mod:<is>(:export(:named, :fg, :fgnamed), $fg);

      my $bg = sub ($x?) { bgcolor($color) ~ ($x//'') } but role { method name { "bg$color" } }
      trait_mod:<is>(:export(:named, :bg, :bgnamed), $bg);
    }

    our sub reset-color(--> Str:D) is export(:codes) { "\e[0m" }
    our sub done-coloring(--> Str:D) is export(:done) { reset-color() }
  }
}

import Term::ModernColor :named, :done;

sub PRI($x?) {
  given $x//'' {
    when 'INFO' { fglime $_ }
    when 'WARN' { fgyellow $_ }
    when 'DEBUG' { fggreen $_ }
    default     { fgred $_ }
  }
}

sub MAIN(
  *@cmd,
  Bool :c($add-category)        = False, #= Add categoy to output (default=False)
  Bool :t($add-timestamp)       = True,  #= Add timestamp to output (default=True)
  Bool :p($add-priority)        = True,  #= Add priority to output (default=True)
  Bool :n($add-non-standard)    = True,  #= Add non-standard fields (default=True)
  Bool :C($color)               = True,  #= Add color to the output (defualt=True)
) {
  if !$color {
    $_ = '' for %ANSI::codes.values;
  }

  my Supply $in;

  if @cmd > 0 {
    my $p = Proc::Async.new: @cmd;
    $in = supply {
      whenever $p.stdout.lines { emit $_ }
      whenever $p.stderr.lines { emit $_ }
      whenever $p.start { done }
    }
  }
  elsif @cmd == 1 {
    my $filename = @cmd[0];

    if $filename eq '-' {
      $in = $*IN.Supply.lines;
    }
    else {
      $in = $filename.IO.lines.Supply;
    }
  }
  else {
    note "The command-line must either be a filename, - (to defang stdin), or -- followed by a command to run plus whatever options you want to use.";
    exit 1;
  }

  react whenever $in -> $line {
    try {
      my %data := from-json($line);

      without %data<@timestamp> | %data<priority> | %data<category> | %data<message> {
        die "doesn't look like a log line to me, some other JSON then";
      }

      my @items;
      push @items, fgyellow(%data<@timestamp> // '-')      if $add-timestamp;
      push @items, PRI(%data<priority>        // 'ERROR') if $add-priority;
      push @items, fgsilver(%data<category>   // '-')      if $add-category;
      push @items, fgsilver(%data<message>    // '-');

      if $add-non-standard {
        my @ns;
        for %data.kv -> $k, $v {
          next if $k âˆˆ $STANDARD-FIELDS;
          push @ns, fgaqua($k) ~ fgsilver("=") ~ fgfuschia("$v") ~ done-coloring;
        }

        if @ns {
          push @items, '{', @ns.join(', '), '}';
        }
      }

      say @items.join(' ');

      CATCH {
        default {
          # dd $_;
          note colorize-regular($line);
        }
      }
    }
  }

  print done-coloring;
}

sub colorize-regular(Str:D $_ --> Str:D) {
  when /^ (' ---> ')( <[a..f 0..9]>+ ) / {
    fgsilver($0) ~ fgfuschia($1) ~ done-coloring
  }

   when m{^ ('Step ')(\d+)('/')(\d+)(' : ')(\S+)(.*)} {
     fgblue($0) ~ fgaqua($1) ~ fgblue($2) ~ fgteal($3) ~ fgblue($4) ~ fgyellow($5) ~ fgsilver($6) ~ done-coloring
   }

   when m{^ invalid .*} { fgred($_) }

   when m{^ (\d ** 4 '-' \d ** 2 '-' \d ** 2 ' ' \d ** 2 ':' \d ** 2 ':' \d ** 2 ' ')('[info]')(.*)} {
     fgyellow($0) ~ fglime($1) ~ fgsilver($2) ~ done-coloring;
   }

   when m{^ (\d ** 4 '-' \d ** 2 '-' \d ** 2 ' ' \d ** 2 ':' \d ** 2 ':' \d ** 2 ' ')('[warn]')(.*)} {
     fgyellow($0) ~ fgyellow($1) ~ fgsilver($2) ~ done-coloring;
   }

   when m{^ (\d ** 4 '-' \d ** 2 '-' \d ** 2 ' ' \d ** 2 ':' \d ** 2 ':' \d ** 2 ' ')('[error]')(.*)} {
     fgyellow($0) ~ fgred($1) ~ fgsilver($2) ~ done-coloring;
   }

   when m{^ (\d ** 4 '-' \d ** 2 '-' \d ** 2 'T' \d ** 2 ':' \d ** 2 ':' \d ** 2 '.' \d ** 6 'Z ')('0 ')('[Note]')(.*)} {
     fgyellow($0) ~ fgsilver($1) ~ fglime($2) ~ fgsilver($3) ~ done-coloring;
   }

   when m{^ (\d ** 4 '-' \d ** 2 '-' \d ** 2 'T' \d ** 2 ':' \d ** 2 ':' \d ** 2 '.' \d ** 6 'Z ')('0 ')('[Warning]')(.*)} {
     fgyellow($0) ~ fgsilver($1) ~ fgyellow($2) ~ fgsilver($3) ~ done-coloring;
   }
   default { $_ }
}
