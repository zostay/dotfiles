[% Zostay::AUTOGEN_WARNING('"') %]
scriptencoding utf-8
set encoding=utf-8

runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()

set tabstop=[% $tabstop %]
set shiftwidth=[% $tabstop %]
set softtabstop=[% $tabstop %]
set shiftround
set expandtab
set ruler
set novisualbell

if has("patch-7.4.710")
    set listchars=eol:‚ê§,tab:‚êâ‚ê£,trail:‚ê¢,extends:¬ª,precedes:¬´,space:‚ê£
else
    set listchars=eol:‚ê§,tab:‚êâ‚ê£,trail:‚ê¢,extends:¬ª,precedes:¬´
endif

set path=.,/usr/include,,src/main/scala,src/main/java,src/main

set cmdheight=2

set encoding=utf8

let g:Perl_AuthorName = 'Sterling Hanenkamp'
let g:Perl_AuthorRef  = 'ASH'
let g:Perl_Email      = 'hanenkamp@cpan.org'

let g:GoFmtAutoSaveToggle = 1

"map q :e #
"nmap ,b :buffers<CR>
nmap ,b :FufBuffer<CR>
nmap ,e :FufTaggedFile<CR>

nmap ,m :0read !new-module -mp5.10 %<CR>
nmap ,r :.w !bash<CR>
nmap ,p :.w !present<CR>

"set autoindent
"set smartindent

set nocompatible
set backspace=indent,eol,start

set nowrap

" I consider "execute contents of register" to be Satanic
noremap ,@ @
noremap @ <Nop>

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk
inoremap = =

set pastetoggle=<F2>

vmap # :<BS><BS><BS><BS><BS>set paste<CR>gvI# <Esc>:set nopaste<CR>

" noremap <C-v> :set paste<CR><C-v>
" inoremap <Esc> <Esc>:set nopaste<CR>
" cnoremap <Esc> <Esc>:set nopaste<CR>

set hlsearch

set showmatch
set matchtime=2

set tw=80
set formatoptions=crqn

filetype indent on

" GUI Options
"set guifontset=-*-*-medium-r-normal--17-*-*-*-m-*-*-*
"set guioptions=aci

"set guifont=LucidaTypewriter\ 12
"set guifont=Monaco:h10

syntax enable
highlight Normal guibg=black guifg=white
set bg=dark

if !exists("*Eatchar")
   func Eatchar(pat)
      let c = nr2char(getchar(0))
      return (c =~ a:pat) ? '' : c
   endfunc
endif

autocmd FileType perl,raku,json,zsh,sh autocmd BufWritePre <buffer> :%s/\s\+$//e

" Git
autocmd BufNewFile,BufRead *.git/COMMIT_EDITMSG setf gitcommit
autocmd BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig
autocmd BufNewFile,BufRead git-rebase-todo      setf gitrebase
autocmd BufNewFile,BufRead .msg.[0-9]*
      \ if getline(1) =~ '^From.*# This line is ignored.$' |
      \   setf gitsendemail |
      \ endif
autocmd BufNewFile,BufRead *.git/**
      \ if getline(1) =~ '^\x\{40\}\>\|^ref: ' |
      \   setf git |
      \ endif

autocmd BufNewFile,BufRead conf/*.conf
    \ setf yaml

autocmd BufNewFile,BufRead *.tt2
  \ setf tt2html |

autocmd BufNewFile,BufRead *.tt
  \ setf tt2html |

autocmd BufEnter */app/view/*.html
    \ setf tt2html

autocmd BufEnter */template/*
    \ setf tt2html

autocmd BufEnter */schema/changes/*
    \ setf sql

autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

autocmd BufEnter *.p6w
    \ set ft=raku

autocmd BufEnter *.mustache
    \ set ft=html

autocmd BufEnter *.module
    \ set ft=php

autocmd BufEnter *.install
    \ set ft=php

autocmd BufEnter *.jinja
  \ set ft=sls

autocmd BufEnter *.notes
	\ set formatoptions=tcrqn |
	\ set ft=notes

autocmd BufEnter *.yml
  \ set indentexpr=

autocmd BufEnter /private/tmp/crontab.* setlocal backupcopy=yes
autocmd BufEnter /tmp/crontab.* setlocal backupcopy=yes

" Recent YAML indenter that ships with vim is crap, turning off for now
autocmd FileType yaml
    \ setlocal indentexpr= |
    \ setlocal si |
    \ setlocal tw=0 |
    \ setlocal expandtab |
    \ setlocal tabstop=2 |
    \ setlocal shiftwidth=2 |
    \ setlocal softtabstop=2

autocmd FileType python
    \ setlocal tabstop=4 |
    \ setlocal shiftwidth=4 |
    \ setlocal softtabstop=4

autocmd BufEnter *.psgi
    \ set ft=perl

autocmd BufEnter *.pm6,*.raku,*.p6,*.rakudoc,*.rakutest
    \ set ft=raku

autocmd FileType tex,notes
	\ set formatoptions=tcrqn |
	\ setlocal tw=80 |
	\ setlocal wrap |
	\ setlocal lbr |
	\ setlocal noai |
	\ setlocal nosi

autocmd FileType markdown
    \ setlocal spell |
    \ setlocal spelllang=en

autocmd FileType mail
	\ set formatoptions=tcrqn |
	\ setlocal tw=78

autocmd FileType xml,xsl
	\ setlocal tw=0 |
	\ setlocal ts=2 |
	\ setlocal sw=2 |
    \ setlocal sts=2

autocmd FileType perl,pod
    \ setlocal wrap |
    \ setlocal lbr

autocmd FileType raku
    \ setlocal wrap |
    \ setlocal lbr |
    \ setlocal nospell |
    \ iabbrev <silent> <buffer>  (>+)         ‚âΩ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (<+)         ‚âº<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  !(>)         ‚äÖ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (>)          ‚äÉ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  !(>=)        ‚äâ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (>=)         ‚äá<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  !(<)         ‚äÑ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (<)          ‚äÇ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  !(<=)        ‚äà<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (<=)         ‚äÜ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  !(cont)      ‚àå<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (cont)       ‚àã<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  !(elem)      ‚àâ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (elem)       ‚àà<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (union)      ‚à™<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (intersect)  ‚à©<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (diff)       ‚àñ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (symdiff)    ‚äñ<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (.)          ‚äç<C-R>=Eatchar('\s')<CR> |
    \ iabbrev <silent> <buffer>  (+)          ‚äé<C-R>=Eatchar('\s')<CR>

autocmd FileType php
    \ setlocal expandtab |
    \ setlocal tabstop=2 |
    \ setlocal shiftwidth=2 |
    \ setlocal autoindent |
    \ setlocal smartindent |
    \ setlocal softtabstop=2

autocmd FileType javascript
    \ setlocal autoindent |
    \ setlocal smartindent

autocmd FileType scala
    \ setlocal suffixesadd=.scala,.java |
    \ setlocal includeexpr=substitute(v:fname,'\\.','/','g')

autocmd FileType html,tt2html
    \ setlocal spell spelllang=en |
    \ setlocal wrap |
    \ setlocal lbr |
    \ setlocal si

autocmd FileType lua
    \ setlocal ts=2 |
    \ setlocal sw=2 |
    \ setlocal sts=2

autocmd FileType java
    \ setlocal suffixesadd=.scala,.java

set modeline
set modelines=10

filetype plugin on

let Tlist_Ctags_Cmd = '/usr/bin/exuberant-ctags'

let g:perldoc_program = '/usr/bin/perldoc'

" Special stuff for Mac
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

iab pmod  :r ~/projects/code-templates/perl/module.pmkdd
iab ptest :set ft=perl:r ~/projects/code-templates/perl/test.tkdd

" winsize 80 24
set guioptions+=c
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

set printoptions=left:0.5in,right:0.5in,top:0.5in,bottom:0.5in,syntax:y,number:y,paper:letter

set t_Co=256
colorscheme desert256

set statusline=\ #%n\ %<%f\ %h%w%m%r%{fugitive#statusline()}\%=%-8(%l,%c%V%)%p%%\
set laststatus=2

hi StatusLine ctermfg=57
hi StatusLineNC ctermfg=141
hi VertSplit ctermfg=141

if !exists("*GetCurrentYAMLPath")
    function GetCurrentYAMLPath()
        let filename = expand('%:t') " last path component
        let pos = getpos('.')

        let section = '^\s*\(\w\+\)\s*:.*'
        let lead_ws = '\(^\s*\).*'

        " look backwards for a line that looks like a yaml section header
        " count the spaces in front of it, and grab the section name
        call search(section, 'cWbs')
        let indent = len( substitute( getline('.'), lead_ws, '\1', 'g' ) )
        let curr_loc = substitute( getline('.'), section, '\1', 'g' )
        let last_indent = indent

        " work backwards, repeating the same steps for shorter and shorter indents
        while (indent > 0)
            call search(section, 'Wbs')
            let indent = len( substitute( getline('.'), lead_ws, '\1', 'g' ) )

            if (indent < last_indent)
                let curr_loc = substitute(getline('.'), section, '\1', 'g' ) . ' > ' . curr_loc
                let last_indent = indent
            endif
        endwhile

        " back from whence we came
        call setpos('.', pos )

        return curr_loc
    endfunction
endif

nmap ,y :echo GetCurrentYAMLPath()<CR>

let perl_include_pod = 1
let g:perl_sub_signatures = 1

nmap ,d :!mkdir -p %:p:h<CR>

let g:airline_powerline_fonts = 1
set guifont=Droid\ Sans\ Mono\ for\ Powerline:h12

highlight ColorColumn ctermbg=54
call matchadd('ColorColumn', '\%81v', 100)

let g:vim_markdown_folding_disabled = 1
set nofoldenable

finish
